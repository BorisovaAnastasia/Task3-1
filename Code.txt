using System;

class Program
{
    static void Main()
    {
        Console.Write("Enter array type. odnomern, dvumern, stupench");
        string tip = Console.ReadLine();
        if(tip == "odnomern")
        {
            Console.Write("Enter the length of the array ");
            int N = Int32.Parse(Console.ReadLine());
            Console.Write("Fill the array manually? true/false or skip? ");
            bool x = bool.TryParse(Console.ReadLine(), out bool not_rnd);
            
            OdnomernMassiv mass = new OdnomernMassiv();

            mass.Mass(N, not_rnd);
            mass.ShowMass();
            mass.GetMassWoDubs();
            mass.ShowMass();
            mass.sort();
            mass.ShowMass();
            Console.WriteLine(mass.MyMassiv[0]);
        }
        if(tip == "dvumern")
        {
            Console.Write("Enter number of lines ");
            int N = Int32.Parse(Console.ReadLine());
            Console.Write("Enter number of columns ");
            int K = Int32.Parse(Console.ReadLine());
            Console.Write("Fill the array manually? true/false or skip? ");
            bool y = bool.TryParse(Console.ReadLine(), out bool not_rnd);
           
            D_Massiv massiv = new D_Massiv();

            massiv.MassD(N, K, not_rnd);
            massiv.ShowMassD();
            massiv.SredZnach();
            massiv.ShowMassD();
            massiv.Pokaz_Rev();
            Console.WriteLine(massiv.MyDMassiv[5, 2]);
        }
        if(tip == "stupench")
        {
            Console.Write("Enter number of lines ");
            int N = Int32.Parse(Console.ReadLine());
            Console.Write("Fill the array manually? true/false or skip? ");
            bool z = bool.TryParse(Console.ReadLine(), out bool not_rnd);
           
            S_Massiv massiv = new S_Massiv();
            
            massiv.InputArray(N, not_rnd);
            massiv.ShowArray();
            Console.WriteLine(massiv.MySMassiv[2][0]);
            Console.WriteLine(massiv.SredZnachArray());
            massiv.SredZnachArrayStr();
            massiv.EditMass();
            massiv.ShowArray();
        }
    }
}
class OdnomernMassiv
{
    private int[] massiv;
    
    public int[] MyMassiv
    {
        get
        {
            return massiv;
        }
    }

    public int[] Mass(int N, bool not_random = false)
    {
        if (not_random == true)
        {
            massiv = new int[N];
            for (int i = 0; i < N; i++)
            {
                int x = int.Parse(Console.ReadLine());
                massiv[i] = x;
            }
            return massiv;
        }
        else
        {
            return RandomMass(N);
        }
    }
    
    public void ShowMass()
    {
        for (int i = 0; i < massiv.Length; i++)
        {
            Console.WriteLine(massiv[i]);
        }
        Console.WriteLine(" ");
    }

    
    private int[] RandomMass(int N)
    {
        massiv = new int[N];
        Random rnd = new Random();
            for (int i = 0; i < N; i++)
            {
                int value = rnd.Next(101);
                int x = value;
                massiv[i] = x;
            }
            return massiv;
    }
    
    public int SredZnach(int[] massiv)
    {
        int sum = 0;
        for (int i = 0; i < massiv.Length; i++)
        {
            sum += massiv[i];
        }
        int sredzn = sum / massiv.Length;
        return sredzn;
    }

    public int[] sort()
    {
        int count = 0;
        
        for (int i = 0; i < massiv.Length; i++)
        {
            if (massiv[i] < 100 && massiv[i]*(-1)<100)
            {
                count += 1;
            }
        }
        int[] mas = new int[count];
            
        int x = 0;
        for (int i = 0; i < massiv.Length; i++)
        {
            if (massiv[i] < 100 && massiv[i]*(-1)<100)
            {
                mas[x] = massiv[i];
                x += 1;
            }
        }
        massiv = mas;
        return massiv;
    }
    
    public int[] GetMassWoDubs()
    {
        int newMassLength = massiv.Length;
        for(int i = 0; i < massiv.Length; i++)
        {
            for(int j = i; j < massiv.Length; j++)
            {
                if(massiv[i] == massiv[j] && i != j)
                {
                    newMassLength--;
                    break;
                }
            }
        }
        int[] NewMass = new int[newMassLength];
        for(int i = 0; i < NewMass.Length; i++)
        {
            NewMass[i] = int.MinValue;
        }
        int c = 0;
        for(int i = 0; i < massiv.Length; i++)
        {
            if(!Ex(massiv[i], NewMass))
            {
                NewMass[c] = massiv[i];
                c++;
            }
        }
        massiv = NewMass;
        return massiv;
    }
    
    private static bool Ex(int val, int[] mass)
    {
        for(int i=0; i < mass.Length; i++)
        {
            if (mass[i] == val)
            {
                return true;
            }
        }
        return false;
    }
}

class D_Massiv
{
    private int[,] massiv;
    
    public int[,] MyDMassiv
    {
        get
        {
            return massiv;
        }
    }
    
    public int[,] MassD(int N, int K, bool not_random = false)
    {
        massiv = new int[N, K];
        if (not_random == true)
        {
            for (int i=0; i < N; i+=1)
            {
                for (int j = 0; j < N; j++)
                {
                    Console.Write($"Элемент[{i},{j}]:");
                    massiv[i,j] = Convert.ToInt32(Console.ReadLine());
                }
            }
            return massiv;
        }
        else
        {
            return RandomMassD(N, K);
        }
    } 
    
    private int[,] RandomMassD(int N, int K)
    {
        massiv = new int[N, K];
        Random rnd = new Random();
        for (int i=0; i < N; i+=1)
        {
            for (int j = 0; j < K; j++)
            {
                int value = rnd.Next(0, 101);
                massiv[i,j] = value;
            }
        }
        return massiv;
    }

    public int SredZnach()
    {
        int sum = 0;
        for (int i = 0; i < massiv.GetLength(0); i++)
        {
            for (int j = 0; j < massiv.GetLength(1); j++)
            {
                sum += massiv[i, j];
            }
        }
        int sredzn = sum / massiv.Length;
        Console.WriteLine(sredzn);
        Console.WriteLine(" ");
        return sredzn;
    }
    
    public void ShowMassD()
    {
        for (int i=0; i < massiv.GetLength(0); i+=1)
        {
            for (int j = 0; j < massiv.GetLength(1); j++)
            {
                if(j == massiv.GetLength(1)-1)
                {
                    Console.WriteLine(massiv[i,j]);
                }
                else
                {
                    Console.Write(massiv[i,j]);
                    Console.Write(" ");
                }
            }
        }
        Console.WriteLine(" ");
    }
 
    public void Pokaz_Rev()
    {
        for (int i=0; i < massiv.GetLength(0); i+=1)
        {
            if (i%2 != 0)
            {
                for (int j = 0; j < massiv.GetLength(1); j++)
                {
                    if(j == massiv.GetLength(1)-1)
                    {
                        Console.WriteLine(massiv[i,j]);
                    }
                    else
                    {
                        Console.Write(massiv[i,j]);
                        Console.Write(" ");
                    }
                }
            }
            else
            {
                for (int j = massiv.GetLength(1)-1; j >= 0; j= j - 1)
                {
                    if(j == 0)
                    {
                        Console.WriteLine(massiv[i,j]);
                    }
                    else
                    {
                        Console.Write(massiv[i,j]);
                        Console.Write(" ");
                    }
                }
            }
        }
        Console.WriteLine(" ");
    }
}

class S_Massiv
{
    private int[][] j_array;
    
    public int[][] MySMassiv
    {
        get
        {
            return j_array;
        }
    }
    
    public int[][] InputArray(int N, bool not_random = false)
    {
        if (not_random == true)
        {
            j_array = new int[N][];
            for (int i = 0; i < N; i++)
            {
                Console.Write($"Введите длину {i+1} строки: ");
                int len = int.Parse(Console.ReadLine());
                j_array[i] = new int[len];
                for (int j = 0; j < len; j++)
                {
                    Console.Write($"Элемент [{i},{j}]: ");
                    j_array[i][j] = Convert.ToInt32(Console.ReadLine());
                }
            }
            return j_array;
        }
        else
        {
            return RandomArray(N);
        }
    }
    
    public int[][] RandomArray(int N)
    {
        j_array = new int[N][];
        Random rnd = new Random();
        for (int i = 0; i < N; i++)
        {
            int len = rnd.Next(1, 11);
            j_array[i] = new int[len];
            for (int j = 0; j < len; j++)
            {
                int value = rnd.Next(0, 101);
                j_array[i][j] = value;
            }
        }
        return j_array;
    }
    
    public void ShowArray()
    {
        for (int i = 0; i<j_array.Length;i++)
        {
            for (int j = 0; j < j_array[i].Length; j++)
            {
                if(j == j_array[i].Length-1)
                {
                    Console.WriteLine(j_array[i][j]);
                }
                else
                {
                    Console.Write(j_array[i][j]);
                    Console.Write(" ");
                }
            }
        }
    }
    
    public int SredZnachArray()
    {
        int sum = 0;
        for (int i = 0; i<j_array.Length;i++)
        {
            for (int j = 0; j < j_array[i].Length; j++)
            {
                sum += j_array[i][j];
            }
        }
        int SredznAr = sum / j_array.Length;
        return SredznAr;
    }
    
    public int[] SredZnachArrayStr()
    {
        int[] SredznAr = new int[j_array.Length];
        for (int i = 0; i<j_array.Length;i++)
        {
            int sum = 0;
            for (int j = 0; j < j_array[i].Length; j++)
            {
                sum += j_array[i][j];
            }
            int sred = sum / j_array[i].Length;
            SredznAr[i] = sred;
        }
        for (int i = 0; i<SredznAr.Length;i++)
        {
            Console.WriteLine(SredznAr[i]);
        }
        return SredznAr;
    }
    
    public int[][] EditMass()
    {
        for (int i = 0; i<j_array.Length;i++)
        {
            for (int j = 0; j < j_array[i].Length; j++)
            {
                if (j_array[i][j] % 2 == 0)
                {
                    j_array[i][j] = i*j;
                }
            }
        }
        return j_array;
    }
}




